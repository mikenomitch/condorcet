// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Why$Condorcet = require("./Why.bs.js");
var Home$Condorcet = require("./Home.bs.js");
var Layout$Condorcet = require("./Layout.bs.js");
var NewPoll$Condorcet = require("./NewPoll.bs.js");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.js");
var NotFound$Condorcet = require("./NotFound.bs.js");
var TakePollPage$Condorcet = require("./TakePollPage.bs.js");
var ManagePollPage$Condorcet = require("./ManagePollPage.bs.js");
var EditResultsPage$Condorcet = require("./EditResultsPage.bs.js");
var PollResultsPage$Condorcet = require("./PollResultsPage.bs.js");

function App(Props) {
  var match = React.useState((function () {
          return /* [] */0;
        }));
  var setNotifications = match[1];
  var notify = function (notificationType, text) {
    var notif = {
      t: notificationType,
      text: text
    };
    Curry._1(setNotifications, (function (param) {
            return /* :: */[
                    notif,
                    /* [] */0
                  ];
          }));
    setTimeout((function (param) {
            return Curry._1(setNotifications, (function (_state) {
                          return /* [] */0;
                        }));
          }), 3000);
    return /* () */0;
  };
  var url = ReasonReactRouter.useUrl(undefined, /* () */0);
  var match$1 = url.path;
  var body;
  var exit = 0;
  if (match$1) {
    switch (match$1[0]) {
      case "manage-poll" :
          var match$2 = match$1[1];
          if (match$2) {
            var match$3 = match$2[1];
            var manageToken = match$2[0];
            if (match$3) {
              if (match$3[0] === "edit-results" && !match$3[1]) {
                body = React.createElement(EditResultsPage$Condorcet.make, {
                      manageToken: manageToken,
                      notify: notify
                    });
              } else {
                exit = 1;
              }
            } else {
              body = React.createElement(ManagePollPage$Condorcet.make, {
                    manageToken: manageToken
                  });
            }
          } else {
            exit = 1;
          }
          break;
      case "new" :
          if (match$1[1]) {
            exit = 1;
          } else {
            body = React.createElement(NewPoll$Condorcet.make, {
                  notify: notify
                });
          }
          break;
      case "results" :
          var match$4 = match$1[1];
          if (match$4 && !match$4[1]) {
            body = React.createElement(PollResultsPage$Condorcet.make, {
                  id: match$4[0]
                });
          } else {
            exit = 1;
          }
          break;
      case "take-poll" :
          var match$5 = match$1[1];
          if (match$5 && !match$5[1]) {
            body = React.createElement(TakePollPage$Condorcet.make, {
                  id: match$5[0],
                  notify: notify
                });
          } else {
            exit = 1;
          }
          break;
      case "why" :
          if (match$1[1]) {
            exit = 1;
          } else {
            body = React.createElement(Why$Condorcet.make, { });
          }
          break;
      default:
        exit = 1;
    }
  } else {
    body = React.createElement(Home$Condorcet.make, { });
  }
  if (exit === 1) {
    body = React.createElement(NotFound$Condorcet.make, { });
  }
  return React.createElement(Layout$Condorcet.make, {
              notifications: match[0],
              children: body
            });
}

var make = App;

exports.make = make;
/* react Not a pure module */
