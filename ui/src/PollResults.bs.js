// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var R$Condorcet = require("./lib/R.bs.js");
var Ordinal$Condorcet = require("./lib/Ordinal.bs.js");

function PollResults(Props) {
  var result = Props.result;
  var match = React.useState((function () {
          return false;
        }));
  var setFullResults = match[1];
  var showingFullResults = match[0];
  var changeFullRes = function (param) {
    return Curry._1(setFullResults, (function (param) {
                  return !showingFullResults;
                }));
  };
  var renderWinners = function (winnersList) {
    return React.createElement("b", undefined, R$Condorcet.s($$Array.of_list(winnersList).join(", ")));
  };
  var renderResponseCount = function (count) {
    if (count !== 0) {
      if (count !== 1) {
        return React.createElement("p", undefined, R$Condorcet.s(String(count) + " responses from:"));
      } else {
        return React.createElement("p", undefined, R$Condorcet.s("1 response from: "));
      }
    } else {
      return React.createElement("p", undefined, R$Condorcet.s("No responses yet"));
    }
  };
  var renderResponseNames = function (names) {
    if (names) {
      return React.createElement("p", undefined, R$Condorcet.s($$Array.of_list(names).join(", ")));
    } else {
      return null;
    }
  };
  var renderRankedResults = function (rankedResults) {
    return React.createElement("div", undefined, $$Array.of_list(List.mapi((function (idx, winners) {
                          return React.createElement("div", {
                                      key: String(idx)
                                    }, React.createElement("i", undefined, React.createElement(Ordinal$Condorcet.make, {
                                              num: idx + 1 | 0
                                            }), R$Condorcet.s(": ")), R$Condorcet.s($$Array.of_list(winners).join(", ")));
                        }), rankedResults)));
  };
  var renderFullResult = function (resultMap, unit, units) {
    return React.createElement("div", undefined, $$Array.of_list(List.map((function (key) {
                          var match = Js_dict.get(resultMap, key);
                          var tmp;
                          if (match !== undefined) {
                            var res = match;
                            tmp = res !== 1 ? R$Condorcet.s(String(res) + (" " + units)) : R$Condorcet.s(String(res) + (" " + unit));
                          } else {
                            tmp = null;
                          }
                          return React.createElement("div", {
                                      key: key,
                                      className: "full-results"
                                    }, React.createElement("i", undefined, R$Condorcet.s(key + ": ")), tmp);
                        }), $$Array.to_list(Object.keys(resultMap)))));
  };
  var renderWinnerString = function (lst, typ) {
    return typ + (
            List.length(lst) > 1 ? " winners: " : " winner: "
          );
  };
  var match$1 = result.winners;
  var match$2 = result.winners;
  var match$3 = result.fullResults;
  var tmp;
  if (match$2 !== undefined && match$3 !== undefined) {
    var resultsMap = match$3;
    var winnerMap = match$2;
    var rankedString = renderWinnerString(winnerMap.ranked, "Instant Runoff");
    var bordaString = renderWinnerString(winnerMap.borda, "Borda Count");
    var pluralityString = renderWinnerString(winnerMap.plurality, "Plurality");
    var match$4 = winnerMap.condorcet;
    tmp = React.createElement("div", undefined, match$4 !== undefined ? React.createElement("p", undefined, R$Condorcet.s("Condorcet Winner: "), React.createElement("b", undefined, R$Condorcet.s(match$4))) : React.createElement("p", undefined, R$Condorcet.s("No Condorcet Winner")), React.createElement("p", undefined, R$Condorcet.s(rankedString), renderWinners(winnerMap.ranked)), showingFullResults ? renderRankedResults(resultsMap.ranked) : null, React.createElement("p", undefined, R$Condorcet.s(bordaString), renderWinners(winnerMap.borda)), showingFullResults ? renderFullResult(resultsMap.borda, "point", "points") : null, React.createElement("p", undefined, R$Condorcet.s(pluralityString), renderWinners(winnerMap.plurality)), showingFullResults ? renderFullResult(resultsMap.plurality, "first place vote", "first place votes") : null);
  } else {
    tmp = null;
  }
  var match$5 = result.winners;
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "results-title"
                }, React.createElement("h3", undefined, R$Condorcet.s("Results")), match$1 !== undefined ? React.createElement("button", {
                        className: "button button-sm",
                        onClick: changeFullRes
                      }, R$Condorcet.s(showingFullResults ? "Hide full results" : "Show full results")) : null), tmp, React.createElement("div", {
                  className: "responses-holder"
                }, renderResponseCount(result.responseCount), renderResponseNames(result.names)), React.createElement("br", undefined), match$5 !== undefined ? React.createElement("div", undefined, React.createElement("a", {
                        href: "/why#alternative-methods"
                      }, R$Condorcet.s("What do these results mean?"))) : null);
}

var make = PollResults;

exports.make = make;
/* react Not a pure module */
