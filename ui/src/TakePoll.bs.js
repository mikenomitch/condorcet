// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Dnd = require("re-dnd/src/Dnd.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var R$Condorcet = require("./R.bs.js");
var Api$Condorcet = require("./Api.bs.js");
var Input$Condorcet = require("./Input.bs.js");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.js");
var ArrayExt$Condorcet = require("./lib/ArrayExt.bs.js");

var eq = Caml_obj.caml_equal;

var Item = {
  eq: eq
};

var Container = Dnd.MakeSingletonContainer({ });

var Items = Dnd.Make(Item, Container);

function reducer(state, action) {
  var match = action[0];
  if (match !== undefined) {
    var match$1 = match;
    if (match$1.tag) {
      return state;
    } else {
      var placement = match$1[1];
      return ArrayExt$Condorcet.reinsert(state, match$1[0], placement ? /* `Before */[
                    -825833313,
                    placement[0]
                  ] : /* Last */847656566);
    }
  } else {
    return state;
  }
}

function TakePoll(Props) {
  var poll = Props.poll;
  var match = React.useState((function () {
          return "";
        }));
  var changeName = match[1];
  var name = match[0];
  var match$1 = React.useReducer(reducer, $$Array.of_list(poll.choices));
  var dispatch = match$1[1];
  var state = match$1[0];
  var state_as_list = $$Array.to_list(state);
  var response = {
    id: undefined,
    name: name,
    order: state_as_list
  };
  var submitChoices = function (param) {
    var match = poll.id;
    if (match !== undefined) {
      var id = match;
      Api$Condorcet.submitPoll(id, response).then((function (param) {
              return Promise.resolve(ReasonReactRouter.push("/results/" + id));
            }));
    } else {
      Promise.resolve(/* () */0);
    }
    return /* () */0;
  };
  var renderIt = function (index, choice) {
    return React.createElement("div", undefined, React.createElement("p", {
                    className: "take-choice-text"
                  }, R$Condorcet.s(String(index + 1 | 0)), R$Condorcet.s(" - "), R$Condorcet.s(choice)));
  };
  var renderChoice = function (index, choice) {
    return React.createElement(Items.DraggableItem.make, {
                id: choice,
                containerId: /* () */0,
                index: index,
                className: (function (dragging) {
                    return "take-choice";
                  }),
                children: /* `Children */[
                  -904145569,
                  renderIt(index, choice)
                ],
                key: choice
              });
  };
  return React.createElement("div", {
              className: "page"
            }, React.createElement("h3", undefined, R$Condorcet.s(poll.question)), React.createElement("div", {
                  className: "take-poll-choice-list"
                }, React.createElement(Items.DndManager.make, {
                      onReorder: (function (result) {
                          return Curry._1(dispatch, /* ReorderItems */[result]);
                        }),
                      children: React.createElement(Items.DroppableContainer.make, {
                            id: /* () */0,
                            axis: /* Y */1,
                            children: $$Array.of_list(List.mapi(renderChoice, $$Array.to_list(state)))
                          })
                    })), React.createElement("br", undefined), React.createElement("br", undefined), React.createElement(Input$Condorcet.make, {
                  placeholder: "...",
                  value: name,
                  onChange: (function ($$event) {
                      return Curry._1(changeName, $$event.target.value);
                    }),
                  label: "Your Name:"
                }), React.createElement("br", undefined), React.createElement("br", undefined), React.createElement("div", {
                  className: "centered"
                }, React.createElement("button", {
                      className: "button button-mdlg",
                      onClick: submitChoices
                    }, R$Condorcet.s("Submit"))));
}

var make = TakePoll;

exports.Item = Item;
exports.Container = Container;
exports.Items = Items;
exports.reducer = reducer;
exports.make = make;
/* Container Not a pure module */
