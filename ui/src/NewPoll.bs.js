// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var R$Condorcet = require("./lib/R.bs.js");
var Api$Condorcet = require("./lib/Api.bs.js");
var Input$Condorcet = require("./ui/Input.bs.js");
var RList$Rationale = require("rationale/src/RList.js");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.js");

function NewPoll(Props) {
  var notify = Props.notify;
  var match = React.useState((function () {
          return {
                  id: undefined,
                  choices: /* :: */[
                    "",
                    /* :: */[
                      "",
                      /* :: */[
                        "",
                        /* :: */[
                          "",
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  manageToken: undefined,
                  question: ""
                };
        }));
  var setPoll = match[1];
  var poll = match[0];
  var match$1 = React.useState((function () {
          return false;
        }));
  var setHasAdded = match$1[1];
  var hasAdded = match$1[0];
  var showButtons = List.length(poll.choices) > 2;
  var addChoice = function (param) {
    Curry._1(setHasAdded, (function (param) {
            return true;
          }));
    return Curry._1(setPoll, (function (param) {
                  return {
                          id: poll.id,
                          choices: List.append(poll.choices, /* :: */[
                                "",
                                /* [] */0
                              ]),
                          manageToken: poll.manageToken,
                          question: poll.question
                        };
                }));
  };
  var savePoll = function (param) {
    Api$Condorcet.createPoll(poll, notify).then((function (res) {
            if (res !== undefined) {
              var match = res.manageToken;
              if (match !== undefined) {
                return Promise.resolve(ReasonReactRouter.push("/manage-poll/" + match));
              } else {
                Curry._2(notify, "error", "There was an issue making this poll");
                return Promise.resolve(/* () */0);
              }
            } else {
              return Promise.resolve(/* () */0);
            }
          }));
    return /* () */0;
  };
  var renderChoice = function (idx, answer) {
    var finalChoice = (idx + 1 | 0) === List.length(poll.choices);
    return React.createElement("div", {
                key: String(idx),
                className: "choice"
              }, React.createElement(Input$Condorcet.make, {
                    placeholder: "Choice...",
                    value: answer,
                    onChange: (function ($$event) {
                        var newChoice = $$event.target.value;
                        var idx$1 = idx;
                        var newChoices = $$Array.of_list(poll.choices);
                        Caml_array.caml_array_set(newChoices, idx$1, newChoice);
                        var newList = $$Array.to_list(newChoices);
                        return Curry._1(setPoll, (function (param) {
                                      return {
                                              id: poll.id,
                                              choices: newList,
                                              manageToken: poll.manageToken,
                                              question: poll.question
                                            };
                                    }));
                      }),
                    focusOnRender: finalChoice && hasAdded
                  }), showButtons ? React.createElement("div", undefined, React.createElement("button", {
                          className: "button button-sm",
                          onClick: (function (param) {
                              var idx$1 = idx;
                              var newChoices = RList$Rationale.remove(idx$1, 1, poll.choices);
                              return Curry._1(setPoll, (function (param) {
                                            return {
                                                    id: poll.id,
                                                    choices: newChoices,
                                                    manageToken: poll.manageToken,
                                                    question: poll.question
                                                  };
                                          }));
                            })
                        }, React.createElement("i", {
                              className: "far fa-trash-alt"
                            }))) : null);
  };
  return React.createElement("div", {
              className: "page"
            }, React.createElement("h3", {
                  className: "centered"
                }, R$Condorcet.s("Create a Poll")), React.createElement("div", {
                  className: "poll-form"
                }, React.createElement("div", undefined, React.createElement(Input$Condorcet.make, {
                          placeholder: "Question...",
                          value: poll.question,
                          onChange: (function ($$event) {
                              var question = $$event.target.value;
                              return Curry._1(setPoll, (function (param) {
                                            return {
                                                    id: poll.id,
                                                    choices: poll.choices,
                                                    manageToken: poll.manageToken,
                                                    question: question
                                                  };
                                          }));
                            }),
                          focusOnRender: true,
                          label: "Your Question:"
                        })), React.createElement("div", {
                      className: "choice-list"
                    }, React.createElement("label", {
                          className: "input-label"
                        }, R$Condorcet.s("Options:")), $$Array.of_list(List.mapi(renderChoice, poll.choices))), React.createElement("div", {
                      className: "new-choice-holder"
                    }, React.createElement("button", {
                          className: "button",
                          onClick: addChoice
                        }, React.createElement("i", {
                              className: "fas fa-plus"
                            }), R$Condorcet.s(" Add Choice")))), React.createElement("div", {
                  className: "centered save-holder"
                }, React.createElement("button", {
                      className: "button button-mdlg",
                      onClick: savePoll
                    }, R$Condorcet.s("Create Poll"))));
}

var RList = /* alias */0;

var make = NewPoll;

exports.RList = RList;
exports.make = make;
/* react Not a pure module */
