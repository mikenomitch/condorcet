Hello - from /Users/mike/.vscode/extensions/jaredly.reason-vscode-1.7.5/bin.native
Previous log location: /var/folders/bq/171rtm851494s4q_zmskhm580000gp/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/src/Fetch.mli","languageId":"ocaml","version":1,"text":"type body\ntype bodyInit\ntype headers\ntype headersInit\ntype response\ntype request\ntype requestInit\n\n(* external *)\ntype arrayBuffer (* TypedArray *)\ntype blob (* FileAPI *)\ntype bufferSource (* Web IDL, either an arrayBuffer or arrayBufferView *)\ntype formData (* XMLHttpRequest *)\ntype readableStream (* Streams *)\ntype urlSearchParams (* URL *)\n\ntype requestMethod =\n  | Get\n  | Head\n  | Post\n  | Put\n  | Delete\n  | Connect\n  | Options\n  | Trace\n  | Patch\n  | Other of string\n\ntype referrerPolicy =\n  | None\n  | NoReferrer\n  | NoReferrerWhenDowngrade\n  | SameOrigin\n  | Origin\n  | StrictOrigin\n  | OriginWhenCrossOrigin\n  | StrictOriginWhenCrossOrigin\n  | UnsafeUrl\n\ntype requestType =\n  | None (* default? unknown? just empty string in spec *)\n  | Audio\n  | Font\n  | Image\n  | Script\n  | Style\n  | Track\n  | Video\n\ntype requestDestination =\n  | None (* default? unknown? just empty string in spec *)\n  | Document\n  | Embed\n  | Font\n  | Image\n  | Manifest\n  | Media\n  | Object\n  | Report\n  | Script\n  | ServiceWorker\n  | SharedWorker\n  | Style\n  | Worker\n  | Xslt\n\ntype requestMode =\n  | Navigate\n  | SameOrigin\n  | NoCORS\n  | CORS\n\ntype requestCredentials =\n  | Omit\n  | SameOrigin\n  | Include\n\ntype requestCache =\n  | Default\n  | NoStore\n  | Reload\n  | NoCache\n  | ForceCache\n  | OnlyIfCached\n\ntype requestRedirect =\n  | Follow\n  | Error\n  | Manual\n\nmodule HeadersInit : sig\n  type t = headersInit\n\n  external make : < .. > Js.t -> t = \"%identity\"\n  external makeWithDict : string Js.Dict.t -> t = \"%identity\"\n  external makeWithArray : (string * string) array -> t = \"%identity\"\nend\n\nmodule Headers : sig\n  type t = headers\n\n  external make : t = \"Headers\" [@@bs.new]\n  external makeWithInit : headersInit -> t = \"Headers\" [@@bs.new]\n\n  external append : string -> string -> unit = \"\" [@@bs.send.pipe: t]\n  external delete : string -> unit = \"\" [@@bs.send.pipe: t]\n  (* entries *) (* very experimental *)\n  external get : string -> string option = \"\" [@@bs.send.pipe: t] [@@bs.return {null_to_opt}]\n  external has : string -> bool = \"\" [@@bs.send.pipe: t]\n  (* keys *) (* very experimental *)\n  external set : string -> string -> unit = \"\" [@@bs.send.pipe: t]\n  (* values *) (* very experimental *)\nend\n\nmodule BodyInit : sig\n  type t = bodyInit\n\n  external make : string -> t = \"%identity\"\n  external makeWithBlob : blob -> t = \"%identity\"\n  external makeWithBufferSource : bufferSource -> t = \"%identity\"\n  external makeWithFormData : formData -> t = \"%identity\"\n  external makeWithUrlSearchParams : urlSearchParams -> t = \"%identity\"\nend\n\nmodule Body : sig\n  type t = body\n\n  external body : t -> readableStream = \"\" [@@bs.get]\n  external bodyUsed : t -> bool = \"\" [@@bs.get]\n\n  external arrayBuffer : arrayBuffer Js.Promise.t = \"\" [@@bs.send.pipe: t]\n  external blob : blob Js.Promise.t = \"\" [@@bs.send.pipe: t]\n  external formData : formData Js.Promise.t = \"\" [@@bs.send.pipe: t]\n  external json : Js.Json.t Js.Promise.t = \"\" [@@bs.send.pipe: t]\n  external text : string Js.Promise.t = \"\" [@@bs.send.pipe: t]\nend\n\nmodule RequestInit : sig\n  type t = requestInit\n\n  val make :\n    ?method_:requestMethod ->\n    ?headers:headersInit ->\n    ?body:bodyInit ->\n    ?referrer:string ->\n    ?referrerPolicy:referrerPolicy ->\n    ?mode:requestMode ->\n    ?credentials:requestCredentials ->\n    ?cache:requestCache ->\n    ?redirect:requestRedirect ->\n    ?integrity:string ->\n    ?keepalive:bool ->\n    unit -> t\nend\n\nmodule Request : sig\n  type t = request\n\n  external make : string -> t = \"Request\" [@@bs.new]\n  external makeWithInit : string -> requestInit -> t = \"Request\" [@@bs.new]\n  external makeWithRequest : t -> t = \"Request\" [@@bs.new]\n  external makeWithRequestInit : t -> requestInit -> t = \"Request\" [@@bs.new]\n\n  val method_: t -> requestMethod\n  external url : t -> string = \"\"[@@bs.get]\n  external headers : t -> headers = \"\" [@@bs.get]\n  val type_: t -> requestType\n  val destination: t -> requestDestination\n  external referrer : t -> string = \"\" [@@bs.get]\n  val referrerPolicy: t -> referrerPolicy\n  val mode: t -> requestMode\n  val credentials: t -> requestCredentials\n  val cache: t -> requestCache\n  val redirect: t -> requestRedirect\n  external integrity : t -> string = \"\" [@@bs.get]\n  external keepalive : t -> bool = \"\" [@@bs.get]\n\n  (* Body Impl *)\n  external body : t -> readableStream = \"\" [@@bs.get]\n  external bodyUsed : t -> bool = \"\" [@@bs.get]\n\n  external arrayBuffer : arrayBuffer Js.Promise.t = \"\" [@@bs.send.pipe: t]\n  external blob : blob Js.Promise.t = \"\" [@@bs.send.pipe: t]\n  external formData : formData Js.Promise.t = \"\" [@@bs.send.pipe: t]\n  external json : Js.Json.t Js.Promise.t = \"\" [@@bs.send.pipe: t]\n  external text : string Js.Promise.t = \"\" [@@bs.send.pipe: t]\nend\n\nmodule Response : sig\n  type t = response\n\n  external error : unit -> t = \"\" [@@bs.val]\n  external redirect : string -> t = \"\" [@@bs.val]\n  external redirectWithStatus : string -> int (* enum-ish *) -> t = \"redirect\" [@@bs.val]\n  external headers : t -> headers = \"\" [@@bs.get]\n  external ok : t -> bool = \"\" [@@bs.get]\n  external redirected : t -> bool = \"\" [@@bs.get]\n  external status : t -> int = \"\" [@@bs.get]\n  external statusText : t -> string = \"\" [@@bs.get]\n  external _type : t -> string = \"\" [@@bs.get]\n  external url : t -> string = \"\" [@@bs.get]\n\n  external clone : t = \"\" [@@bs.send.pipe: t]\n\n  (* Body.Impl *)\n  external body : t -> readableStream = \"\" [@@bs.get]\n  external bodyUsed : t -> bool = \"\" [@@bs.get]\n\n  external arrayBuffer : arrayBuffer Js.Promise.t = \"\" [@@bs.send.pipe: t]\n  external blob : blob Js.Promise.t = \"\" [@@bs.send.pipe: t]\n  external formData : formData Js.Promise.t = \"\" [@@bs.send.pipe: t]\n  external json : Js.Json.t Js.Promise.t = \"\" [@@bs.send.pipe: t]\n  external text : string Js.Promise.t = \"\" [@@bs.send.pipe: t]\nend\n\nexternal fetch : string -> response Js.Promise.t = \"\" [@@bs.val]\nexternal fetchWithInit : string -> requestInit -> response Js.Promise.t = \"fetch\" [@@bs.val]\nexternal fetchWithRequest : request -> response Js.Promise.t = \"fetch\" [@@bs.val]\nexternal fetchWithRequestInit : request -> requestInit -> response Js.Promise.t = \"fetch\" [@@bs.val]"}}}
📣 📣 NEW BSB PACKAGE 📣 📣
- location: /Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch
- bsPlatform: /Users/mike/Code/condorcet/priv/assets/node_modules/bs-platform
- buildSystem: bsb version 7.0.1
- build command: /Users/mike/Code/condorcet/priv/assets/node_modules/bs-platform/lib/bsb.exe -make-world
>> Build system running: /Users/mike/Code/condorcet/priv/assets/node_modules/bs-platform/lib/bsb.exe -make-world
>>> stdout
bsb: no work to do.
>>> stderr

Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/bsconfig.json", "diagnostics": []}}
Deps 
Got source directories src - examples
Source directories: /Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/src - /Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/examples
Source files found: /Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/src/bs_fetch.ml : /Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/src/Fetch.mli : /Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/src/Fetch.ml : /Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/examples/ocaml_examples.ml : /Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/examples/reason_examples.re
Adding intf /Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/src/Fetch.mli
Bad source file (extension) /Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/src/Fetch.mli
Bad source file (no cmt/cmi) /Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/lib/bs/examples/ocaml_examples
Bad source file (no cmt/cmi) /Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/lib/bs/examples/reason_examples
-- All local modules found: 2
Bs_fetch
impl /Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/lib/bs/src/bs_fetch.cmt
Fetch
Both
Dependency dirs /Users/mike/Code/condorcet/priv/assets/node_modules/bs-platform/lib/ocaml
Running diagnostics for file:///Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/src/Fetch.mli
➡️ running compiler /Users/mike/Code/condorcet/priv/assets/node_modules/bs-platform/lib/bsc.exe -c -I '/Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/lib/bs/src' -I '/Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/lib/bs/examples' -I '/Users/mike/Code/condorcet/priv/assets/node_modules/bs-platform/lib/ocaml' -I '/Users/mike/Code/condorcet/priv/assets/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -ppx '/Users/mike/Code/condorcet/priv/assets/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -w -30-40+6+7+27+32..39+44+45+101 -intf /Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/node_modules/.lsp/Fetch.asti with pwd /Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch
<< Replacing lastDefinitions for file:///Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/src/Fetch.mli
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/src/Fetch.mli", "diagnostics": [{"range": {"start": {"line": 104, "character": 2}, "end": {"line": 104, "character": 69}}, "message": "Warning 105: BuckleScript warning: append : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 105, "character": 2}, "end": {"line": 105, "character": 59}}, "message": "Warning 105: BuckleScript warning: delete : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 107, "character": 2}, "end": {"line": 107, "character": 93}}, "message": "Warning 105: BuckleScript warning: get : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 108, "character": 2}, "end": {"line": 108, "character": 56}}, "message": "Warning 105: BuckleScript warning: has : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 110, "character": 2}, "end": {"line": 110, "character": 66}}, "message": "Warning 105: BuckleScript warning: set : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 127, "character": 2}, "end": {"line": 127, "character": 53}}, "message": "Warning 105: BuckleScript warning: body : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 128, "character": 2}, "end": {"line": 128, "character": 47}}, "message": "Warning 105: BuckleScript warning: bodyUsed : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 130, "character": 2}, "end": {"line": 130, "character": 74}}, "message": "Warning 105: BuckleScript warning: arrayBuffer : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 131, "character": 2}, "end": {"line": 131, "character": 60}}, "message": "Warning 105: BuckleScript warning: blob : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 132, "character": 2}, "end": {"line": 132, "character": 68}}, "message": "Warning 105: BuckleScript warning: formData : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 133, "character": 2}, "end": {"line": 133, "character": 65}}, "message": "Warning 105: BuckleScript warning: json : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 134, "character": 2}, "end": {"line": 134, "character": 62}}, "message": "Warning 105: BuckleScript warning: text : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 164, "character": 2}, "end": {"line": 164, "character": 43}}, "message": "Warning 105: BuckleScript warning: url : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 165, "character": 2}, "end": {"line": 165, "character": 49}}, "message": "Warning 105: BuckleScript warning: headers : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 168, "character": 2}, "end": {"line": 168, "character": 49}}, "message": "Warning 105: BuckleScript warning: referrer : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 174, "character": 2}, "end": {"line": 174, "character": 50}}, "message": "Warning 105: BuckleScript warning: integrity : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 175, "character": 2}, "end": {"line": 175, "character": 48}}, "message": "Warning 105: BuckleScript warning: keepalive : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 178, "character": 2}, "end": {"line": 178, "character": 53}}, "message": "Warning 105: BuckleScript warning: body : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 179, "character": 2}, "end": {"line": 179, "character": 47}}, "message": "Warning 105: BuckleScript warning: bodyUsed : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 181, "character": 2}, "end": {"line": 181, "character": 74}}, "message": "Warning 105: BuckleScript warning: arrayBuffer : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 182, "character": 2}, "end": {"line": 182, "character": 60}}, "message": "Warning 105: BuckleScript warning: blob : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 183, "character": 2}, "end": {"line": 183, "character": 68}}, "message": "Warning 105: BuckleScript warning: formData : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 184, "character": 2}, "end": {"line": 184, "character": 65}}, "message": "Warning 105: BuckleScript warning: json : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 185, "character": 2}, "end": {"line": 185, "character": 62}}, "message": "Warning 105: BuckleScript warning: text : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 191, "character": 2}, "end": {"line": 191, "character": 44}}, "message": "Warning 105: BuckleScript warning: error : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 192, "character": 2}, "end": {"line": 192, "character": 49}}, "message": "Warning 105: BuckleScript warning: redirect : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 194, "character": 2}, "end": {"line": 194, "character": 49}}, "message": "Warning 105: BuckleScript warning: headers : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 195, "character": 2}, "end": {"line": 195, "character": 41}}, "message": "Warning 105: BuckleScript warning: ok : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 196, "character": 2}, "end": {"line": 196, "character": 49}}, "message": "Warning 105: BuckleScript warning: redirected : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 197, "character": 2}, "end": {"line": 197, "character": 44}}, "message": "Warning 105: BuckleScript warning: status : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 198, "character": 2}, "end": {"line": 198, "character": 51}}, "message": "Warning 105: BuckleScript warning: statusText : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 199, "character": 2}, "end": {"line": 199, "character": 46}}, "message": "Warning 105: BuckleScript warning: _type : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 200, "character": 2}, "end": {"line": 200, "character": 44}}, "message": "Warning 105: BuckleScript warning: url : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 202, "character": 2}, "end": {"line": 202, "character": 45}}, "message": "Warning 105: BuckleScript warning: clone : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 205, "character": 2}, "end": {"line": 205, "character": 53}}, "message": "Warning 105: BuckleScript warning: body : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 206, "character": 2}, "end": {"line": 206, "character": 47}}, "message": "Warning 105: BuckleScript warning: bodyUsed : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 208, "character": 2}, "end": {"line": 208, "character": 74}}, "message": "Warning 105: BuckleScript warning: arrayBuffer : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 209, "character": 2}, "end": {"line": 209, "character": 60}}, "message": "Warning 105: BuckleScript warning: blob : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 210, "character": 2}, "end": {"line": 210, "character": 68}}, "message": "Warning 105: BuckleScript warning: formData : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 211, "character": 2}, "end": {"line": 211, "character": 65}}, "message": "Warning 105: BuckleScript warning: json : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 212, "character": 2}, "end": {"line": 212, "character": 62}}, "message": "Warning 105: BuckleScript warning: text : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}, {"range": {"start": {"line": 215, "character": 0}, "end": {"line": 215, "character": 64}}, "message": "Warning 105: BuckleScript warning: fetch : the external name is inferred from val name is unsafe from refactoring when changing value name", "severity": 2}]}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/src/Fetch.mli"},"range":{"start":{"line":104,"character":2},"end":{"line":104,"character":69}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 1, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/src/Fetch.mli"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 2, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/src/Fetch.mli"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 3, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Dependencies: ", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/src/Fetch.mli"},"range":{"start":{"line":104,"character":2},"end":{"line":104,"character":69}},"context":{"diagnostics":[{"range":{"start":{"line":104,"character":2},"end":{"line":104,"character":69}},"message":"Warning 105: BuckleScript warning: append : the external name is inferred from val name is unsafe from refactoring when changing value name","severity":2}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 4, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/mike/Code/condorcet/priv/assets/node_modules/bs-fetch/src/Fetch.mli"}}}
